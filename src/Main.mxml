<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:components="components.*"
               width="100%"
               height="100%"
               minWidth="720"
               minHeight="480"
               creationComplete="onCreationComplete(event)"
               backgroundColor="0x323232"
               frameRate="60">

    <fx:Style source="/assets/css/global.css" />

    <fx:Script>
        <![CDATA[
        import com.greensock.TweenLite;

        import global.Util;

        import mx.events.FlexEvent;

        import signal.SignalEvent;
        import signal.SignalManager;
        import signal.SignalType;

        private var signalManager:SignalManager;

        // For launcher use only; Launcher uses this list to determine what assets to download
        // The client can expect all required assets to be present
        public var assetList:Array = ["splash.json", "wallpapers.zip"]

        private function onCreationComplete(event:FlexEvent):void
        {
            // Set up SignalManager
            signalManager = SignalManager.getInstance();
            signalManager.addEventListener(SignalEvent.SIGNAL, handleSignal);

            browser.alpha = 0;
            tabChildren   = false;

            this.addEventListener(MouseEvent.CLICK, onClick);
        }

        private function onClick(event:MouseEvent):void
        {
            this.removeEventListener(MouseEvent.CLICK, onClick);
            if (browser.alpha == 0)
                start();
        }

        public function setAssetDirectory(assetDirectory:String):void
        {
            Util.LOCAL_STORAGE_PATH = assetDirectory;
        }

        public function start():void
        {
            // Triggered by launcher
            browser.start();
            TweenLite.to(browser, 0.5, {alpha: 1});
        }

        private function handleSignal(signalEvent:SignalEvent):void
        {
            // Handle global Signals

            // Stage Quality
            if (stage && signalEvent.action == SignalType.QUALITY)
                stage.quality = signalEvent.payload as String;
        }
        ]]>
    </fx:Script>

    <components:Browser id="browser"
                        width="100%"
                        height="100%" />

</s:Application>