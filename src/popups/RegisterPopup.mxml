<?xml version="1.0"?>
<popups:BasePopup xmlns:fx="http://ns.adobe.com/mxml/2009"
                  xmlns:s="library://ns.adobe.com/flex/spark"
                  xmlns:components="components.*"
                  creationComplete="onCreationComplete(event)"
                  xmlns:popups="popups.*">

    <fx:Script>
        <![CDATA[
        import global.Color;

        import managers.LanguageManager;

        import mx.events.FlexEvent;

        import signal.SignalType;

        private var valid:Boolean;

        private function onCreationComplete(event:FlexEvent):void
        {
            setTimeout(function ():void
            {
                inputEmail.setFocus();
            }, 250);

            // Add Listeners
            buttonSwitchToLogin.addEventListener(MouseEvent.CLICK, onButtonSwitchToLogin);
            closeButton.addEventListener(MouseEvent.CLICK, onButtonClose);
            buttonRegister.addEventListener(MouseEvent.CLICK, onButtonRegister);

            inputEmail.addEventListener(KeyboardEvent.KEY_DOWN, updateRegisterButton);
            inputEmail.addEventListener(KeyboardEvent.KEY_UP, updateRegisterButton);
            inputPassword.addEventListener(KeyboardEvent.KEY_DOWN, updateRegisterButton);
            inputPassword.addEventListener(KeyboardEvent.KEY_UP, updateRegisterButton);
            inputConfirmPassword.addEventListener(KeyboardEvent.KEY_DOWN, updateRegisterButton);
            inputConfirmPassword.addEventListener(KeyboardEvent.KEY_UP, updateRegisterButton);

            updateRegisterButton(null);
        }

        override public function dispose():void
        {
            super.dispose();

            // Remove listeners
            buttonSwitchToLogin.removeEventListener(MouseEvent.CLICK, onButtonSwitchToLogin);
            closeButton.removeEventListener(MouseEvent.CLICK, onButtonClose);
            buttonRegister.removeEventListener(MouseEvent.CLICK, onButtonRegister);

            inputEmail.removeEventListener(KeyboardEvent.KEY_DOWN, updateRegisterButton);
            inputEmail.removeEventListener(KeyboardEvent.KEY_UP, updateRegisterButton);
            inputPassword.removeEventListener(KeyboardEvent.KEY_DOWN, updateRegisterButton);
            inputPassword.removeEventListener(KeyboardEvent.KEY_UP, updateRegisterButton);
            inputConfirmPassword.removeEventListener(KeyboardEvent.KEY_DOWN, updateRegisterButton);
            inputConfirmPassword.removeEventListener(KeyboardEvent.KEY_UP, updateRegisterButton);
        }

        private function onButtonClose(event:MouseEvent):void
        {
            end();
        }

        private function onButtonSwitchToLogin(event:MouseEvent):void
        {
            signalManager.dispatch({startPopup: {id: PopupTypes.LOGIN}});
            end();
        }

        private function updateRegisterButton(event:Event):void
        {
            callLater(function ():void
            {
                valid = true;

                if (inputEmail.text.length == 0)
                    valid = false;

                if (inputPassword.text.length == 0)
                    valid = false;

                if (inputConfirmPassword.text.length == 0)
                    valid = false;

                if (inputPassword.text != inputConfirmPassword.text)
                {
                    valid                                     = false;
                    labelConfirmPasswordError.visible         = true;
                    labelConfirmPasswordError.includeInLayout = true;
                } else
                {
                    labelConfirmPasswordError.visible         = false;
                    labelConfirmPasswordError.includeInLayout = false;
                }

                buttonRegister.enabled = valid;
            });
        }

        private function onButtonRegister(event:MouseEvent):void
        {
            signalManager.dispatch({
                action: SignalType.REGISTER,
                args:   {
                    email:    inputEmail.text,
                    password: inputPassword.text
                }
            });

            buttonRegister.enabled = false;
        }
        ]]>
    </fx:Script>

    <s:Panel skinClass="skins.PanelSkin"
             width="550">

        <components:ActionLogoComponent id="logo"
                                        left="-20"
                                        top="-25" />
        <s:HGroup width="100%">
            <s:Spacer width="100%" />
            <s:VGroup padding="5">
                <components:CloseButtonComponent id="closeButton" />
            </s:VGroup>
        </s:HGroup>

        <s:BitmapImage id="bitmapImage"
                       smooth="true"
                       smoothingQuality="high" />

        <s:VGroup id="content"
                  width="100%"
                  horizontalAlign="left">
            <s:Spacer height="60" />

            <s:Label id="labelRegister"
                     text="{LanguageManager.getText('labelRegister')}"
                     width="100%"
                     color="0x808080"
                     paddingLeft="20"
                     paddingRight="20" />

            <s:Spacer height="20" />

            <s:VGroup width="100%"
                      height="100%"
                      verticalAlign="middle"
                      horizontalAlign="center">

                <s:VGroup width="350">

                    <s:Label width="100%"
                             text="{LanguageManager.getText('labelEmail')}" />
                    <s:TextInput id="inputEmail"
                                 width="100%" />

                    <s:Label width="100%"
                             text="{LanguageManager.getText('labelPassword')}" />
                    <s:TextInput id="inputPassword"
                                 width="100%"
                                 displayAsPassword="true" />

                    <s:Label width="100%"
                             text="{LanguageManager.getText('labelConfirmPassword')}" />
                    <s:TextInput id="inputConfirmPassword"
                                 width="100%"
                                 displayAsPassword="true" />

                    <s:Label id="labelConfirmPasswordError"
                             text="{LanguageManager.getText('labelConfirmPasswordError')}"
                             color="{Color.red}" />

                    <s:HGroup width="100%"
                              horizontalAlign="right">

                        <s:Button id="buttonRegister"
                                  label="{LanguageManager.getText('buttonRegister').toUpperCase()}"
                                  skinClass="skins.buttons.PrimaryButtonSkin" />
                    </s:HGroup>
                </s:VGroup>
                <s:Spacer height="5" />

            </s:VGroup>

            <s:Panel width="100%"
                     height="60"
                     skinClass="skins.NestedPanelSkin">

                <s:HGroup width="100%"
                          height="100%"
                          verticalAlign="middle"
                          verticalCenter="0"
                          padding="15">

                    <s:Spacer width="100%" />

                    <s:Label id="labelSwitchToLogin"
                             text="{LanguageManager.getText('labelSwitchToLogin')}" />
                    <s:Button id="buttonSwitchToLogin"
                              label="{LanguageManager.getText('buttonSwitchToLogin').toUpperCase()}" />

                </s:HGroup>

            </s:Panel>

        </s:VGroup>

    </s:Panel>

</popups:BasePopup>
