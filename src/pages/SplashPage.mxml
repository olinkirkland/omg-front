<?xml version="1.0"?>
<pages:Page xmlns:fx="http://ns.adobe.com/mxml/2009"
            xmlns:s="library://ns.adobe.com/flex/spark"
            xmlns:pages="pages.*"
            creationComplete="onCreationComplete(event)"
            width="100%"
            height="100%">
    
    <fx:Script>
    <![CDATA[
        import components.DynamicPanImageButtonComponent;
        
        import mx.events.FlexEvent;
        
        import signal.SignalEvent;
        import signal.SignalManager;
        
        private var features: Array;
        
        private function onCreationComplete(event: FlexEvent): void
        {
            // Signal Manager
            signalManager = SignalManager.getInstance();
            signalManager.addEventListener(SignalEvent.SIGNAL, handleSignal);
            
            payload = JSON.parse(new Service.SPLASH_JSON());
            
            // Set spotlight
            var spotlight: DynamicPanImageButtonComponent = new DynamicPanImageButtonComponent();
            spotlight.source = Service.formatAssetURL(payload.spotlight.image) + "?" + Service.VERSION;
            spotlight.color = payload.spotlight.imageColor;
            spotlight.buttonText = payload.spotlight.buttonText;
            spotlight.labelText = payload.spotlight.labelText;
            spotlight.payload = payload.spotlight.payload;
            spotlightGroup.addElement(spotlight);
            
            // Set features
            features = [];
            for each (var featureObject: Object in payload.features)
            {
                var feature: DynamicPanImageButtonComponent = new DynamicPanImageButtonComponent();
                feature.source = Service.formatAssetURL(featureObject.image) + "?" + Service.VERSION;
                feature.color = featureObject.imageColor;
                feature.buttonText = featureObject.buttonText;
                feature.labelText = featureObject.labelText;
                feature.payload = featureObject.payload;
                featuresGroup.addElement(feature);
                features.push(feature);
            }
            
            // Force Resize
            invalidateSize();
            invalidateDisplayList();
            invalidateParentSizeAndDisplayList();
        }
        
        override public function handleSignal(signalEvent: SignalEvent): void
        {
            // Handle global Signals
        }
        
        override public function dispose(): void
        {
            super.dispose();
        }
        ]]>
    </fx:Script>
    
    <s:VGroup width="100%"
              height="100%"
              padding="12"
              gap="3">
        
        <s:HGroup width="100%"
                  height="60%"
                  id="spotlightGroup" />
        
        <s:HGroup width="100%"
                  height="40%"
                  id="featuresGroup"
                  gap="3" />
    
    </s:VGroup>

</pages:Page>