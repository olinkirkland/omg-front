<?xml version="1.0"?>
<mx:UIComponent xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                styleName="ProgressBarComponent"
                initialize="onInitialize(event)"
                creationComplete="onCreationComplete(event)">

    <fx:Script>
        <![CDATA[
        import com.greensock.TweenLite;

        import mx.events.FlexEvent;

        private var nested:Asset_ProgressBar;
        private var minBarWidth:int = 20;

        private function onInitialize(event:FlexEvent):void
        {
            nested = new Asset_ProgressBar();
            height = nested.height;
        }

        private function onCreationComplete(event:FlexEvent):void
        {
            addChild(nested);

            invalidateSize();

            /*
            Bubbles
             */

            var timer:Timer = new Timer(100);
            timer.addEventListener(TimerEvent.TIMER, function (e:TimerEvent):void
            {
                for (var i:int = 0; i < nested.bubbles.numChildren; i++)
                {
                    if (!MovieClip(nested.bubbles.getChildAt(i)).isPlaying && Math.random() * 100 < 5)
                        MovieClip(nested.bubbles.getChildAt(i)).play();
                }
            });
            timer.start();

            /*
            Bar Color
             */

            var textColor:ColorTransform        = new ColorTransform();
            textColor.color                     = getStyle("color");
            nested.bar.transform.colorTransform = textColor;
        }

        public function moveTo(percent:Number):void
        {
            TweenLite.killTweensOf(nested.bar);
            nested.bar.scaleX        = 1;
            nested.bubblesMask.width = percent;

            checkMinWidth();
        }

        public function animateTo(percent:Number):void
        {
            TweenLite.to(nested.bar, 1, {scaleX: percent / 100});
            TweenLite.to(nested.bubblesMask, 1, {scaleX: percent / 100, onUpdate: checkMinWidth});
        }

        public function checkMinWidth():void
        {
            if (nested.bar.width < minBarWidth)
            {
                nested.bar.width = minBarWidth;
                TweenLite.killTweensOf(nested.bar);
            }
        }

        override public function get width():Number
        {
            return nested.overlay.width;
        }

        override public function get height():Number
        {
            return nested.overlay.height;
        }
        ]]>
    </fx:Script>

</mx:UIComponent>
