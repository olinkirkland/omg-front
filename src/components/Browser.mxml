<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:components="components.*"
         xmlns:panes="panes.*"
         xmlns:top="components.topBar.*"
         initialize="onInitialize(event)"
         creationComplete="onCreationComplete(event)"
         xmlns:s="library://ns.adobe.com/flex/spark">

    <fx:Script>
        <![CDATA[
        import com.greensock.TweenLite;

        import managers.DataManager;

        import managers.LanguageManager;
        import managers.User;

        import mx.events.FlexEvent;

        import net.Client;
        import net.ClientMessageType;
        import net.ServerMessageType;

        import pages.PageType;

        import popups.BasePopup;
        import popups.LoadingPopup;
        import popups.PopupFactory;
        import popups.PopupType;

        import signal.SignalEvent;
        import signal.SignalManager;
        import signal.SignalType;

        private var popup:BasePopup;
        private var queuedPopupId:String;
        private var queuedPopupPayload:Object;
        private var signalManager:SignalManager;
        private var dataManager:DataManager;
        private var client:Client;

        private function onInitialize(event:FlexEvent):void
        {
            client = new Client();
            client.addEventListener(Event.CONNECT, onConnect);
            client.addEventListener(Event.CLOSE, onDisconnect);

            buttonNameCard.items = [
                {
                    text:   LanguageManager.getText("labelMyProfile"),
                    target: {action: SignalType.LOAD_PAGE, payload: {type: PageType.PROFILE, id: -1}}
                },
                {
                    text:   LanguageManager.getText("labelLogout"),
                    target: {action: ClientMessageType.LOGOUT}
                }
            ];
        }

        public function updateCard(str:String):void
        {
            card.text = str;
        }

        private function onCreationComplete(event:FlexEvent):void
        {
        }

        public function start():void
        {
            // Signal Manager
            signalManager = SignalManager.getInstance();
            signalManager.addEventListener(SignalEvent.SIGNAL, handleSignal);

            // Data Manager
            dataManager = DataManager.getInstance();

            // Text
            buttonHome.text     = LanguageManager.getText("buttonHome").toUpperCase();
            buttonSocial.text   = LanguageManager.getText("buttonSocial").toUpperCase();
            buttonLogin.text    = LanguageManager.getText("buttonLogin").toUpperCase();
            buttonRegister.text = LanguageManager.getText("buttonRegister").toUpperCase();
            buttonSettings.text = LanguageManager.getText("buttonSettings").toUpperCase();

            // Event Listeners
            buttonLogin.addEventListener(MouseEvent.CLICK, function (event:MouseEvent):void
            {
                startPopup(PopupType.LOGIN);
            });

            buttonRegister.addEventListener(MouseEvent.CLICK, function (event:MouseEvent):void
            {
                startPopup(PopupType.REGISTER);
            });

            buttonSettings.addEventListener(MouseEvent.CLICK, function (event:MouseEvent):void
            {
                startPopup(PopupType.SETTINGS);
            });

            buttonHome.addEventListener(MouseEvent.CLICK, function (event:MouseEvent):void
            {
                signalManager.dispatch(SignalType.LOAD_PAGE, {type: PageType.SPLASH});
            });

            // Force Resize
            invalidateSize();
            invalidateDisplayList();
            invalidateParentSizeAndDisplayList();

            // Startup
            startPopup(PopupType.LOADING, {text: LanguageManager.getText("loadingConnecting")});
            setTimeout(client.create, 200);

            // Initially, Open the Splash page
            signalManager.dispatch(SignalType.LOAD_PAGE, {type: PageType.SPLASH});

            updateUserBar();
        }

        private function onConnect(event:Event):void
        {
            popup.end();
        }

        private function onDisconnect(event:Event):void
        {
            startPopup(PopupType.LOADING, {text: LanguageManager.getText("loadingConnecting")});
        }

        private function startPopup(id:String, payload:Object = null):void
        {
            if (popup)
            {
                // Close the current Popup and queue the new one to start
                popup.end();
                queuedPopupId      = id;
                queuedPopupPayload = payload;
                return;
            }

            // Start the popup
            popupShade.visible = true;
            TweenLite.to(popupShade, 1, {alpha: 1, onComplete: onPopupShadeComplete});
            popup = PopupFactory.makePopup(id);
            if (popup)
            {
                popup.payload = payload;
                popup.addEventListener(Event.COMPLETE, onEndPopup);
                popupContainer.addElement(popup);

                setTimeout(popup.start, 100);
            }
        }

        private function onEndPopup(event:Event):void
        {
            if (popup)
            {
                popup.removeEventListener(Event.COMPLETE, onEndPopup);
                popupContainer.removeElement(popup);
                popup = null;
            }
            if (queuedPopupId)
            {
                startPopup(queuedPopupId, queuedPopupPayload);
                queuedPopupId      = null;
                queuedPopupPayload = null;
            } else
            {
                TweenLite.to(popupShade, .3, {alpha: 0, onComplete: onPopupShadeComplete});
            }
        }

        private function onPopupShadeComplete():void
        {
            popupShade.visible = popupShade.alpha != 0;
        }

        public function handleSignal(signalEvent:SignalEvent):void
        {
            var payload:Object = signalEvent.payload;

            switch (signalEvent.action)
            {
                case SignalType.START_POPUP:
                    startPopup(payload.id, payload);
                    break;
                case SignalType.END_POPUP:
                    if (popup) popup.end();
                    break;
                case ServerMessageType.LOGIN_SUCCESS:
                    startPopup(PopupType.LOADING, {text: LanguageManager.getText("loadingLoggingIn")});
                    callLater(update);
                    break;
                case ServerMessageType.LOGOUT_FAIL:
                    startPopup(PopupType.ERROR, "labelLogoutFail");
                    break;
                case ServerMessageType.LOGOUT_SUCCESS:
                    if (popup is LoadingPopup) popup.end();
                    callLater(update);
                    break;
                case ServerMessageType.USER_NOT_VERIFIED:
                    startPopup(PopupType.VERIFY_EMAIL, payload as String);
                    break;
                case ServerMessageType.USER_NOT_NAMED:
                    startPopup(PopupType.CHOOSE_NAME);
                    break;
                case ServerMessageType.CHOOSE_NAME_SUCCESS:
                    if (popup) popup.end();
                    callLater(update);
                    break;
                case ClientMessageType.LOGOUT:
                    startPopup(PopupType.LOADING, {text: LanguageManager.getText("loadingLoggingOut")});
                    callLater(update);
                    break;
            }
        }

        private function update():void
        {
            // Update all
            updateUserBar();
        }

        private function updateUserBar():void
        {
            // Make sure the right stuff is visible
            guestGroup.visible   = guestGroup.includeInLayout = !client.isLoggedIn;
            profileGroup.visible = profileGroup.includeInLayout = !guestGroup.visible;

            if (client.isLoggedIn)
            {
                // Populate player card
                dataManager.requestUser(Client.id, onGetUserMe);

                buttonNameCard.text = "";
            }
        }

        private function onGetUserMe(me:User):void
        {
            if (popup is LoadingPopup)
                popup.end();

            clearQueuedPopup();

            buttonNameCard.text = me.name;
        }

        public function clearQueuedPopup():void
        {
            if (popup)
                popup.end();
            queuedPopupId      = null;
            queuedPopupPayload = null;
        }
        ]]>
    </fx:Script>

    <s:VGroup width="100%"
              height="100%"
              gap="0">

        <!--User Interface-->
        <s:HGroup width="100%"
                  gap="0">

            <!--Navigation Bar (Top Left)-->
            <s:Panel id="navigationBar"
                     skinClass="skins.NavigationBarSkin">

                <s:HGroup gap="0">

                    <s:Spacer width="6" />
                    <s:VGroup height="5"
                              left="0"
                              right="0"
                              top="0"
                              bottom="0"
                              gap="0">
                        <s:Spacer height="2" />
                        <s:VGroup>
                            <components:Card id="card"
                                             x="15"
                                             y="35"
                                             includeInLayout="false" />
                            <components:ActionLogoComponent id="logo"
                                                            height="60" />
                        </s:VGroup>
                    </s:VGroup>

                    <s:Spacer width="20" />

                    <s:HGroup gap="-1">

                        <components:BarDivider />
                        <top:BarButton id="buttonHome" />
                        <components:BarDivider />
                        <top:BarButtonCombo id="buttonSocial" />
                        <components:BarDivider />

                        <s:Spacer width="40" />

                    </s:HGroup>

                </s:HGroup>

            </s:Panel>

            <s:VGroup width="100%"
                      height="100%">
                <s:Spacer width="100%" />
            </s:VGroup>

            <!--User Bar (Top Right)-->
            <s:Panel id="userBar"
                     skinClass="skins.UserBarSkin">

                <s:Group width="100%">

                    <s:HGroup id="guestGroup"
                              gap="-1"
                              width="100%"
                              height="100%">

                        <s:Spacer width="40" />
                        <components:BarDivider />
                        <top:BarButton id="buttonLogin" />
                        <components:BarDivider />
                        <top:BarButton id="buttonRegister" />

                    </s:HGroup>

                    <s:HGroup id="profileGroup"
                              gap="-1"
                              width="100%"
                              height="100%">

                        <s:Spacer width="40" />
                        <components:BarDivider />
                        <top:BarButtonCombo id="buttonNameCard"
                                            rightAlign="true" />
                    </s:HGroup>

                </s:Group>

            </s:Panel>

        </s:HGroup>

        <!--Content Pane-->
        <s:HGroup width="100%"
                  height="100%"
                  padding="15"
                  paddingTop="30"
                  depth="-1">
            <panes:PaneBase width="100%"
                            height="100%"
                            browser="{this}" />
        </s:HGroup>

        <s:VGroup width="100%">

            <!--Task Bar (Bottom)-->
            <s:Panel id="taskBar"
                     width="100%"
                     skinClass="skins.TaskBarSkin">

                <s:HGroup gap="-1"
                          width="100%">

                    <s:Spacer width="100%" />

                    <components:BarDivider />
                    <top:BarButton id="buttonSettings" />

                </s:HGroup>

            </s:Panel>

        </s:VGroup>

    </s:VGroup>

    <!--Popups-->
    <s:Group width="100%"
             height="100%">
        <s:Rect id="popupShade"
                width="100%"
                height="100%"
                alpha="0">
            <s:fill>
                <s:SolidColor color="0x000000"
                              alpha="0.6" />
            </s:fill>
        </s:Rect>
        <s:HGroup id="popupContainer"
                  width="100%"
                  height="100%"
                  horizontalAlign="center"
                  verticalAlign="middle" />
    </s:Group>

</s:Group>